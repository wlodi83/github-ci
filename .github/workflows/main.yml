name: main
on:
  workflow_dispatch:
  push:
    branches:
      - "**"

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      - uses: pre-commit/action@v3.0.0

  small-tests:
    runs-on: ubuntu-latest
    needs: pre-commit
    strategy:
      matrix:
        version: [ "3.9", "3.10", "3.11" ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.version }}
      - name: Install jobsim
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry install
      - name: run small-tests-${{ matrix.version }}
        run: poetry run pytest -v --junitxml=small_tests_results_${{ matrix.version }}.xml tests/small
      - uses: actions/upload-artifact@v3
        with:
          name: junit-logs-${{ matrix.version }}
          path: small_tests_results_${{ matrix.version }}.xml

  large-tests:
    runs-on: ubuntu-latest
    needs: [small-tests]
    strategy:
      fail-fast: false
      matrix:
        version: [ "3.9", "3.10", "3.11" ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.version }}
      - name: Install jobsim
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry install
      - name: run large-tests-${{ matrix.version }}
        run: poetry run pytest -v --junitxml=large_tests_results_${{ matrix.version }}.xml tests/large
      - uses: actions/upload-artifact@v3
        if: success()
        with:
          name: junit-logs-${{ matrix.version }}
          path: large_tests_results_${{ matrix.version }}.xml

  release:
    name: Release new version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: false
          persist-credentials: false
      - name: Install jobsim
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry install
      - name: Semantic release
        id: semantic
        uses: splunk/semantic-release-action@v1.3
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN_ADMIN }}
        with:
          git_committer_name: ${{ secrets.SA_GH_USER_NAME }}
          git_committer_email: ${{ secrets.SA_GH_USER_EMAIL }}
          gpg_private_key: ${{ secrets.SA_GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.SA_GPG_PASSPHRASE }}
          extra_plugins: |
            @google/semantic-release-replace-plugin

  report_workflow:
    if: always()
    runs-on: ubuntu-latest
    needs: [pre-commit, small-tests, large-tests]
    steps:
      - uses: uoboda-splunk/workflow-info-splunk-upload-action@v1
        with:
          splunk_host: ${{ secrets.SPLUNK_HOST }}
          splunk_token: ${{ secrets.SPLUNK_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
